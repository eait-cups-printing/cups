diff --git a/scheduler/auth.c b/scheduler/auth.c
index 5fa53644d..59c074d63 100644
--- a/scheduler/auth.c
+++ b/scheduler/auth.c
@@ -1557,6 +1557,11 @@ cupsdIsAuthorized(cupsd_client_t *con,	/* I - Connection */
 		  "Negotiate"
 		};
 
+  /* Prevent Windows IPP 1.0 clients from accessing this CUPS server */
+  if (con->is_win_ipp_10) {
+    cupsdLogMessage(CUPSD_LOG_DEBUG, "cupsdIsAuthorized: old Windows IPP 1.0 HTTP_FORBIDDEN");
+    return (HTTP_FORBIDDEN);
+  }
 
   cupsdLogMessage(CUPSD_LOG_DEBUG2, "cupsdIsAuthorized: con->uri=\"%s\", con->best=%p(%s)", con->uri, (void *)con->best, con->best ? con->best->location ? con->best->location : "(null)" : "");
   if (owner)
@@ -1685,6 +1690,14 @@ cupsdIsAuthorized(cupsd_client_t *con,	/* I - Connection */
     cupsdLogMessage(CUPSD_LOG_DEBUG, "cupsdIsAuthorized: username=\"%s\"",
 	            con->username);
 
+  /* Prevent Windows IPP inbox class driver from infinitely retrying */
+  if (con->is_win_mopria && !strncmp(ippOpString(best->op), "Validate-Job", 12) && !con->username[0] && type != CUPSD_AUTH_NONE) {
+    cupsdLogMessage(CUPSD_LOG_DEBUG,
+                    "cupsdIsAuthorized: Windows IPP inbox class driver HTTP_FORBIDDEN op=\"%s\"",
+                    ippOpString(best->op));
+    return (HTTP_FORBIDDEN);
+  }
+
 #ifdef HAVE_AUTHORIZATION_H
     if (!con->username[0] && !con->authref)
 #else
diff --git a/scheduler/client.c b/scheduler/client.c
index f0349a6c9..366c4a117 100644
--- a/scheduler/client.c
+++ b/scheduler/client.c
@@ -840,6 +840,12 @@ cupsdReadClient(cupsd_client_t *con)	/* I - Client to read from */
     */
 
     con->is_browser = !strncmp(httpGetField(con->http, HTTP_FIELD_USER_AGENT), "Mozilla/", 8);
+    con->is_win_mopria = !strncmp(httpGetField(con->http, HTTP_FIELD_USER_AGENT), "wPrintWindowsDoc", 16);
+    con->is_win_ipp_10 = !strncmp(httpGetField(con->http, HTTP_FIELD_USER_AGENT), "Internet Print Provider", 23);
+    con->is_macos_cups = !strncmp(httpGetField(con->http, HTTP_FIELD_USER_AGENT), "CUPS/", 5) &&
+                         strstr(httpGetField(con->http, HTTP_FIELD_USER_AGENT), "macOS");
+
+    cupsdLogClient(con, CUPSD_LOG_DEBUG, "cupsdReadClient: is_browser=%d, is_win_mopria=%d, is_win_ipp_10=%d, is_macos_cups=%d", con->is_browser, con->is_win_mopria, con->is_win_ipp_10, con->is_macos_cups);
 
     if (httpGetField(con->http, HTTP_FIELD_ACCEPT_LANGUAGE)[0])
     {
diff --git a/scheduler/client.h b/scheduler/client.h
index 9fe4e2ea6..96103ba8d 100644
--- a/scheduler/client.h
+++ b/scheduler/client.h
@@ -29,6 +29,9 @@ struct cupsd_client_s
   http_state_t		operation;	/* Request operation */
   off_t			bytes;		/* Bytes transferred for this request */
   int			is_browser;	/* Is the client a web browser? */
+  int			is_macos_cups;	/* Is the client macOS CUPS ? */
+  int			is_win_mopria;  /* Is the client Windows IPP inbox IPP class driver ? */
+  int			is_win_ipp_10;  /* Is the client old Windows IPP 1.0 ? */
   int			type;		/* AuthType for username */
   char			username[HTTP_MAX_VALUE],
 					/* Username from Authorization: line */
diff --git a/scheduler/ipp.c b/scheduler/ipp.c
index 8b01ba16a..0300a44d6 100644
--- a/scheduler/ipp.c
+++ b/scheduler/ipp.c
@@ -5035,11 +5035,62 @@ copy_printer_attrs(
   if (!ra || cupsArrayFind(ra, "uri-security-supported"))
     ippAddString(con->response, IPP_TAG_PRINTER, IPP_TAG_KEYWORD, "uri-security-supported", NULL, is_encrypted ? "tls" : "none");
 
-  copy_attrs(con->response, printer->attrs, ra, IPP_TAG_ZERO, 0, NULL);
-  if (printer->ppd_attrs)
-    copy_attrs(con->response, printer->ppd_attrs, ra, IPP_TAG_ZERO, 0, NULL);
-  copy_attrs(con->response, CommonData, ra, IPP_TAG_ZERO, IPP_TAG_COPY, NULL);
+   /*
+    * Remove  "- IPP Everywhere" suffix from printer-make-and-model as the final string for remote clients,
+    * as the additional "-AirPrint" or "-IPP Everywhere" suffixes appended can get very long.
+    * For Windows IPP inbox class driver, map printer-info to more useful printer-make-and-model
+    * as the make and model is not shown otherwise in the IPP inbox class driver properties.
+    */
+  if (!con->pipe_pid && !httpAddrLocalhost(httpGetAddress(con->http)) && _cups_strcasecmp(con->http->hostname, ServerName) && ra && (cupsArrayFind(ra, "printer-make-and-model") || cupsArrayFind(ra, "printer-info")))
+  {
+    char model[64] = {0};
+    cups_array_t *exclude;
+    char *substr = NULL;
+
+    exclude = cupsArrayNew((cups_array_func_t)strcmp, NULL);
+
+    if (cupsArrayFind(ra, "printer-make-and-model"))
+    {
+      cupsArrayAdd(exclude, "printer-make-and-model");
+    }
+
+    if (con->is_win_mopria && cupsArrayFind(ra, "printer-info"))
+    {
+      cupsArrayAdd(exclude, "printer-info");
+    }
+
+    copy_attrs(con->response, printer->attrs, ra, IPP_TAG_ZERO, 0, exclude);
+    if (printer->ppd_attrs) {
+      copy_attrs(con->response, printer->ppd_attrs, ra, IPP_TAG_ZERO, 0, exclude);
+    }
+    cupsArrayDelete(exclude);
+
+    strncpy(model, printer->make_model, sizeof(model) - 1);
+    substr = strstr(model, " - IPP Everywhere");
+    if (substr != NULL)
+    {
+      *substr = '\0';
+    }
+
+    if (cupsArrayFind(ra, "printer-make-and-model"))
+    {
+      ippAddString(con->response, IPP_TAG_PRINTER, IPP_TAG_TEXT, "printer-make-and-model", NULL, model);
+    }
+
+    if (con->is_win_mopria && cupsArrayFind(ra, "printer-info"))
+    {
+      ippAddString(con->response, IPP_TAG_PRINTER, IPP_TAG_TEXT, "printer-info", NULL, model);
+    }
+  }
+  else
+  {
+    copy_attrs(con->response, printer->attrs, ra, IPP_TAG_ZERO, 0, NULL);
+    if (printer->ppd_attrs) {
+      copy_attrs(con->response, printer->ppd_attrs, ra, IPP_TAG_ZERO, 0, NULL);
+    }
+  }
 
+  copy_attrs(con->response, CommonData, ra, IPP_TAG_ZERO, IPP_TAG_COPY, NULL);
   _cupsRWUnlock(&printer->lock);
 }
 
